package uk.gov.dluhc.printapi.testsupport.assertj.assertions

import jakarta.annotation.Generated
import org.assertj.core.annotation.CheckReturnValue
import org.assertj.core.api.AbstractObjectAssert
import org.assertj.core.api.Assertions
import org.assertj.core.api.Assertions.within
import uk.gov.dluhc.printapi.database.entity.PrintRequestStatus
import uk.gov.dluhc.printapi.database.entity.PrintRequestStatus.Status
import java.time.Instant
import java.time.temporal.ChronoUnit
import java.util.Objects
import java.util.UUID

/**
 * [PrintRequestStatus] specific assertions - Generated by CustomAssertionGenerator.
 */
@Generated(value = ["assertj-assertions-generator"])
class PrintRequestStatusAssert
/**
 * Creates a new `[PrintRequestStatusAssert]` to make assertions on actual PrintRequestStatus.
 * @param actual the PrintRequestStatus we want to make assertions on.
 */
(actual: PrintRequestStatus?) :
    AbstractObjectAssert<PrintRequestStatusAssert?, PrintRequestStatus?>(
        actual,
        PrintRequestStatusAssert::class.java
    ) {
    /**
     * Verifies that the actual PrintRequestStatus's createdBy is not null.
     * @return this assertion object.
     * @throws AssertionError - if the actual PrintRequestStatus's createdBy is null.
     */
    fun hasCreatedBy(): PrintRequestStatusAssert {
        // check that actual PrintRequestStatus we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting createdBy of:\n  <%s>\nto be non-null"

        Assertions.assertThat(actual!!.createdBy)
            .overridingErrorMessage(assertjErrorMessage, actual)
            .isNotNull

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual PrintRequestStatus's createdBy is equal to the given one.
     * @param createdBy the given createdBy to compare the actual PrintRequestStatus's createdBy to.
     * @return this assertion object.
     * @throws AssertionError - if the actual PrintRequestStatus's createdBy is not equal to the given one.
     */
    fun hasCreatedBy(createdBy: String?): PrintRequestStatusAssert {
        // check that actual PrintRequestStatus we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting createdBy of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualCreatedBy = actual!!.createdBy
        if (!Objects.deepEquals(actualCreatedBy, createdBy)) {
            failWithMessage(assertjErrorMessage, actual, createdBy, actualCreatedBy)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual PrintRequestStatus's dateCreated is not null.
     * @return this assertion object.
     * @throws AssertionError - if the actual PrintRequestStatus's dateCreated is null.
     */
    fun hasDateCreated(): PrintRequestStatusAssert {
        // check that actual PrintRequestStatus we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting dateCreated of:\n  <%s>\nto be non-null"

        Assertions.assertThat(actual!!.dateCreated)
            .overridingErrorMessage(assertjErrorMessage, actual)
            .isNotNull

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual PrintRequestStatus's dateCreated is equal wihtin margin to the given one.
     * @param dateCreated the given dateCreated to compare the actual PrintRequestStatus's dateCreated to.
     * @return this assertion object.
     * @throws AssertionError - if the actual PrintRequestStatus's dateCreated is not equal to the given one.
     */
    fun hasDateCreated(dateCreated: Instant?, margin: Long = 5): PrintRequestStatusAssert {
        // check that actual PrintRequestStatus we want to make assertions on is not null.
        isNotNull

        val assertjErrorMessage =
            "\nExpecting dateCreated of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        val actualDateCreated = actual!!.dateCreated
        Assertions.assertThat(actualDateCreated)
            .overridingErrorMessage(
                assertjErrorMessage,
                actual,
                actualDateCreated,
                dateCreated
            )
            .isCloseTo(dateCreated, within(margin, ChronoUnit.SECONDS))

        return this
    }

    /**
     * Verifies that the actual PrintRequestStatus's eventDateTime is equal within margin to the given one.
     * @param dateCreated the given dateCreated to compare the actual PrintRequestStatus's eventDateTime to.
     * @return this assertion object.
     * @throws AssertionError - if the actual PrintRequestStatus's eventDateTime is not equal to the given one.
     */
    fun hasEventDateTime(eventDateTime: Instant, margin: Long = 1): PrintRequestStatusAssert {
        // check that actual PrintRequestStatus we want to make assertions on is not null.
        isNotNull

        val assertjErrorMessage =
            "\nExpecting eventDateTime of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        val actualEventDateTime = actual!!.eventDateTime
        Assertions.assertThat(actualEventDateTime)
            .overridingErrorMessage(
                assertjErrorMessage,
                actual,
                actualEventDateTime,
                eventDateTime
            )
            .isCloseTo(eventDateTime, within(margin, ChronoUnit.SECONDS))

        return this
    }

    /**
     * Verifies that the actual PrintRequestStatus's id is not null.
     * @return this assertion object.
     * @throws AssertionError - if the actual PrintRequestStatus's id is null.
     */
    fun hasId(): PrintRequestStatusAssert {
        // check that actual PrintRequestStatus we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be non-null"

        Assertions.assertThat(actual!!.id)
            .overridingErrorMessage(assertjErrorMessage, actual)
            .isNotNull

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual PrintRequestStatus's id is equal to the given one.
     * @param id the given id to compare the actual PrintRequestStatus's id to.
     * @return this assertion object.
     * @throws AssertionError - if the actual PrintRequestStatus's id is not equal to the given one.
     */
    fun hasId(id: UUID?): PrintRequestStatusAssert {
        // check that actual PrintRequestStatus we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualId = actual!!.id
        if (!Objects.deepEquals(actualId, id)) {
            failWithMessage(assertjErrorMessage, actual, id, actualId)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual PrintRequestStatus's message is equal to the given one.
     * @param message the given message to compare the actual PrintRequestStatus's message to.
     * @return this assertion object.
     * @throws AssertionError - if the actual PrintRequestStatus's message is not equal to the given one.
     */
    fun hasMessage(message: String?): PrintRequestStatusAssert {
        // check that actual PrintRequestStatus we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting message of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualMessage = actual!!.message
        if (!Objects.deepEquals(actualMessage, message)) {
            failWithMessage(assertjErrorMessage, actual, message, actualMessage)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual PrintRequestStatus's status is equal to the given one.
     * @param status the given status to compare the actual PrintRequestStatus's status to.
     * @return this assertion object.
     * @throws AssertionError - if the actual PrintRequestStatus's status is not equal to the given one.
     */
    fun hasStatus(status: Status?): PrintRequestStatusAssert {
        // check that actual PrintRequestStatus we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting status of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualStatus = actual!!.status
        if (!Objects.deepEquals(actualStatus, status)) {
            failWithMessage(assertjErrorMessage, actual, status, actualStatus)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual PrintRequestStatus's version is not null.
     * @return this assertion object.
     * @throws AssertionError - if the actual PrintRequestStatus's version is null.
     */
    fun hasVersion(): PrintRequestStatusAssert {
        // check that actual PrintRequestStatus we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting version of:\n  <%s>\nto be non-null"

        Assertions.assertThat(actual!!.version)
            .overridingErrorMessage(assertjErrorMessage, actual)
            .isNotNull

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual PrintRequestStatus's version is equal to the given one.
     * @param version the given version to compare the actual PrintRequestStatus's version to.
     * @return this assertion object.
     * @throws AssertionError - if the actual PrintRequestStatus's version is not equal to the given one.
     */
    fun hasVersion(version: Long?): PrintRequestStatusAssert {
        // check that actual PrintRequestStatus we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting version of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualVersion = actual!!.version
        if (!Objects.deepEquals(actualVersion, version)) {
            failWithMessage(assertjErrorMessage, actual, version, actualVersion)
        }

        // return the current assertion for method chaining
        return this
    }

    companion object {
        /**
         * An entry point for PrintRequestStatusAssert to follow AssertJ standard `assertThat()` statements.<br></br>
         * With a static import, one can write directly: `assertThat(myPrintRequestStatus)` and get specific assertion with code completion.
         * @param actual the PrintRequestStatus we want to make assertions on.
         * @return a new `[PrintRequestStatusAssert]`
         */
        @CheckReturnValue
        fun assertThat(actual: PrintRequestStatus?): PrintRequestStatusAssert {
            return PrintRequestStatusAssert(actual)
        }
    }
}
