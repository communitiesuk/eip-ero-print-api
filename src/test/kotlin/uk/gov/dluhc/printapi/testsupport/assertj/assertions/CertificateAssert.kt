package uk.gov.dluhc.printapi.testsupport.assertj.assertions

import org.assertj.core.api.AbstractObjectAssert
import org.assertj.core.api.Assertions.assertThat
import org.assertj.core.api.Assertions.within
import org.assertj.core.internal.Iterables
import org.assertj.core.util.CheckReturnValue
import uk.gov.dluhc.printapi.database.entity.Certificate
import uk.gov.dluhc.printapi.database.entity.PrintRequest
import uk.gov.dluhc.printapi.database.entity.PrintRequestStatus.Status
import uk.gov.dluhc.printapi.database.entity.SourceType
import java.time.Instant
import java.time.LocalDate
import java.time.temporal.ChronoUnit.SECONDS
import java.util.Objects
import java.util.UUID
import javax.annotation.Generated

/**
 * [Certificate] specific assertions - Generated by CustomAssertionGenerator.
 */
@Generated(value = ["assertj-assertions-generator"])
class CertificateAssert
/**
 * Creates a new `[CertificateAssert]` to make assertions on actual Certificate.
 * @param actual the Certificate we want to make assertions on.
 */
(actual: Certificate?) :
    AbstractObjectAssert<CertificateAssert?, Certificate?>(
        actual,
        CertificateAssert::class.java
    ) {
    /**
     * Verifies that the actual Certificate's applicationReceivedDateTime is equal to the given one.
     * @param applicationReceivedDateTime the given applicationReceivedDateTime to compare the actual Certificate's applicationReceivedDateTime to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Certificate's applicationReceivedDateTime is not equal to the given one.
     */
    fun hasApplicationReceivedDateTime(applicationReceivedDateTime: Instant?): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        val assertjErrorMessage =
            "\nExpecting applicationReceivedDateTime of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        val actualApplicationReceivedDateTime = actual!!.applicationReceivedDateTime
        assertThat(actualApplicationReceivedDateTime)
            .overridingErrorMessage(
                assertjErrorMessage,
                actual,
                actualApplicationReceivedDateTime,
                applicationReceivedDateTime
            )
            .isCloseTo(applicationReceivedDateTime, within(1, SECONDS))

        return this
    }

    /**
     * Verifies that the actual Certificate's applicationReference is equal to the given one.
     * @param applicationReference the given applicationReference to compare the actual Certificate's applicationReference to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Certificate's applicationReference is not equal to the given one.
     */
    fun hasApplicationReference(applicationReference: String?): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting applicationReference of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualApplicationReference = actual!!.applicationReference
        if (!Objects.deepEquals(actualApplicationReference, applicationReference)) {
            failWithMessage(assertjErrorMessage, actual, applicationReference, actualApplicationReference)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's createdBy is not null.
     * @return this assertion object.
     * @throws AssertionError - if the actual Certificate's createdBy is null.
     */
    fun hasCreatedBy(): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting createdBy of:\n  <%s>\nto be non-null"

        assertThat(actual!!.createdBy)
            .overridingErrorMessage(assertjErrorMessage, actual)
            .isNotNull

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's createdBy is equal to the given one.
     * @param createdBy the given createdBy to compare the actual Certificate's createdBy to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Certificate's createdBy is not equal to the given one.
     */
    fun hasCreatedBy(createdBy: String?): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting createdBy of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualCreatedBy = actual!!.createdBy
        if (!Objects.deepEquals(actualCreatedBy, createdBy)) {
            failWithMessage(assertjErrorMessage, actual, createdBy, actualCreatedBy)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's dateCreated is not null.
     * @return this assertion object.
     * @throws AssertionError - if the actual Certificate's dateCreated is null.
     */
    fun hasDateCreated(): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting dateCreated of:\n  <%s>\nto be non-null"

        assertThat(actual!!.dateCreated)
            .overridingErrorMessage(assertjErrorMessage, actual)
            .isNotNull

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's dateCreated is equal within margin to the given one.
     * @param dateCreated the given dateCreated to compare the actual Certificate's dateCreated to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Certificate's dateCreated is not equal to the given one.
     */
    fun hasDateCreated(dateCreated: Instant?, margin: Long = 1): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        val assertjErrorMessage =
            "\nExpecting dateCreated of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        val actualDateCreated = actual!!.dateCreated
        assertThat(actualDateCreated)
            .overridingErrorMessage(
                assertjErrorMessage,
                actual,
                actualDateCreated,
                dateCreated
            )
            .isCloseTo(dateCreated, within(margin, SECONDS))

        return this
    }

    /**
     * Verifies that the actual Certificate's gssCode is equal to the given one.
     * @param gssCode the given gssCode to compare the actual Certificate's gssCode to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Certificate's gssCode is not equal to the given one.
     */
    fun hasGssCode(gssCode: String?): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting gssCode of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualGssCode = actual!!.gssCode
        if (!Objects.deepEquals(actualGssCode, gssCode)) {
            failWithMessage(assertjErrorMessage, actual, gssCode, actualGssCode)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's id is not null.
     * @return this assertion object.
     * @throws AssertionError - if the actual Certificate's id is null.
     */
    fun hasId(): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be non-null"

        assertThat(actual!!.id)
            .overridingErrorMessage(assertjErrorMessage, actual)
            .isNotNull

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's id is equal to the given one.
     * @param id the given id to compare the actual Certificate's id to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Certificate's id is not equal to the given one.
     */
    fun hasId(id: UUID?): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualId = actual!!.id
        if (!Objects.deepEquals(actualId, id)) {
            failWithMessage(assertjErrorMessage, actual, id, actualId)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's issueDate is equal to the given one.
     * @param issueDate the given issueDate to compare the actual Certificate's issueDate to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Certificate's issueDate is not equal to the given one.
     */
    fun hasIssueDate(issueDate: LocalDate?): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting issueDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualIssueDate = actual!!.issueDate
        if (!Objects.deepEquals(actualIssueDate, issueDate)) {
            failWithMessage(assertjErrorMessage, actual, issueDate, actualIssueDate)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's initialRetentionRemovalDate is equal to the given one.
     * @param initialRetentionRemovalDate the given initialRetentionRemovalDate to compare the actual Certificate's one.
     * @return this assertion object.
     * @throws AssertionError - if the actual Certificate's initialRetentionRemovalDate is not equal to the given one.
     */
    fun hasInitialRetentionRemovalDate(initialRetentionRemovalDate: LocalDate?): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting initialRetentionRemovalDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualInitialRetentionRemovalDate = actual!!.initialRetentionRemovalDate
        if (!Objects.deepEquals(actualInitialRetentionRemovalDate, initialRetentionRemovalDate)) {
            failWithMessage(assertjErrorMessage, actual, initialRetentionRemovalDate, actualInitialRetentionRemovalDate)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the data which needs to be removed after the initial retention period is null.
     * @return this assertion object.
     * @throws AssertionError if the data is not null.
     */
    fun initialRetentionPeriodDataIsRemoved(): CertificateAssert {
        // check that actual PrintRequest we want to make assertions on is not null.
        isNotNull

        if (this.actual?.initialRetentionDataRemoved == false) {
            failWithMessage("Expecting initialRetentionDataRemoved to be true.")
        }

        this.actual?.printRequests?.forEach {
            PrintRequestAssert(it).doesNotHaveInitialRetentionPeriodData()
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the data which needs to be removed after the initial retention period still exists.
     * @return this assertion object.
     * @throws AssertionError if the data is null.
     */
    fun hasInitialRetentionPeriodData(): CertificateAssert {
        // check that actual PrintRequest we want to make assertions on is not null.
        isNotNull

        if (this.actual?.initialRetentionDataRemoved == true) {
            failWithMessage("Expecting initialRetentionDataRemoved to be false.")
        }

        this.actual?.printRequests?.forEach {
            PrintRequestAssert(it).hasInitialRetentionPeriodData()
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's issuingAuthority is equal to the given one.
     * @param issuingAuthority the given issuingAuthority to compare the actual Certificate's issuingAuthority to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Certificate's issuingAuthority is not equal to the given one.
     */
    fun hasIssuingAuthority(issuingAuthority: String?): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting issuingAuthority of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualIssuingAuthority = actual!!.issuingAuthority
        if (!Objects.deepEquals(actualIssuingAuthority, issuingAuthority)) {
            failWithMessage(assertjErrorMessage, actual, issuingAuthority, actualIssuingAuthority)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's printRequests contains the given PrintRequest elements in Collection.
     * @param printRequests the given elements that should be contained in actual Certificate's printRequests.
     * @return this assertion object.
     * @throws AssertionError if the actual Certificate's printRequests does not contain all given PrintRequest elements.
     */
    fun hasPrintRequests(printRequests: Collection<PrintRequest>): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        for (printRequest in printRequests) {
            hasPrintRequest(printRequest.requestDateTime!!)
                .hasId()
                .hasRequestId()
                .hasVacVersion(printRequest.vacVersion)
                .hasRequestDateTime(printRequest.requestDateTime)
                .hasFirstName(printRequest.firstName)
                .hasMiddleNames(printRequest.middleNames)
                .hasSurname(printRequest.surname)
                .hasCertificateLanguage(printRequest.certificateLanguage)
                .hasSupportingInformationFormat(printRequest.supportingInformationFormat)
                .hasPhotoLocationArn(printRequest.photoLocationArn)
                .hasDelivery(printRequest.delivery!!)
                .hasEroEnglish(printRequest.eroEnglish!!)
                .hasEroWelsh(printRequest.eroWelsh)
                .hasUserId(printRequest.userId)
                .hasBatchId(printRequest.batchId)
                .hasCurrentStatus(printRequest.getCurrentStatus())
                .hasStatusHistory(printRequest.statusHistory)
                .hasDateCreated()
                .hasCreatedBy()
                .hasVersion()
        }

        // return the current assertion for method chaining
        return this
    }

    fun hasPrintRequest(requestDateTime: Instant): PrintRequestAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        val printRequest = actual!!.printRequests.find { it.requestDateTime!! == requestDateTime }

        // check that given PrintRequest collection is not null.
        if (printRequest == null) {
            failWithMessage("Expecting printRequest to exist with requestDateTime of `$requestDateTime")
        }

        // return the print request assertion to continue assertions on the print request
        return PrintRequestAssert(printRequest)
    }

    /**
     * Verifies that the actual Certificate's printRequests contains **only** the given PrintRequest elements and nothing else in whatever order.
     * @param printRequests the given elements that should be contained in actual Certificate's printRequests.
     * @return this assertion object.
     * @throws AssertionError if the actual Certificate's printRequests does not contain all given PrintRequest elements.
     */
    fun hasOnlyPrintRequests(vararg printRequests: PrintRequest?): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual!!.printRequests, printRequests)

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's printRequests contains **only** the given PrintRequest elements in Collection and nothing else in whatever order.
     * @param printRequests the given elements that should be contained in actual Certificate's printRequests.
     * @return this assertion object.
     * @throws AssertionError if the actual Certificate's printRequests does not contain all given PrintRequest elements.
     */
    fun hasOnlyPrintRequests(printRequests: Collection<PrintRequest?>?): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // check that given PrintRequest collection is not null.
        if (printRequests == null) {
            failWithMessage("Expecting printRequests parameter not to be null.")
            return this // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
        Iterables.instance().assertContainsOnly(info, actual!!.printRequests, printRequests.toTypedArray())

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's printRequests does not contain the given PrintRequest elements.
     *
     * @param printRequests the given elements that should not be in actual Certificate's printRequests.
     * @return this assertion object.
     * @throws AssertionError if the actual Certificate's printRequests contains any given PrintRequest elements.
     */
    fun doesNotHavePrintRequests(vararg printRequests: PrintRequest?): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual!!.printRequests, printRequests)

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's printRequests does not contain the given PrintRequest elements in Collection.
     *
     * @param printRequests the given elements that should not be in actual Certificate's printRequests.
     * @return this assertion object.
     * @throws AssertionError if the actual Certificate's printRequests contains any given PrintRequest elements.
     */
    fun doesNotHavePrintRequests(printRequests: Collection<PrintRequest?>?): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // check that given PrintRequest collection is not null.
        if (printRequests == null) {
            failWithMessage("Expecting printRequests parameter not to be null.")
            return this // to fool Eclipse "Null pointer access" warning on toArray.
        }

        // check with standard error message (use overridingErrorMessage before contains to set your own message).
        Iterables.instance().assertDoesNotContain(info, actual!!.printRequests, printRequests.toTypedArray())

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate has no printRequests.
     * @return this assertion object.
     * @throws AssertionError if the actual Certificate's printRequests is not empty.
     */
    fun hasNoPrintRequests(): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // we override the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have printRequests but had :\n  <%s>"

        // check
        if (actual!!.printRequests.iterator().hasNext()) {
            failWithMessage(assertjErrorMessage, actual, actual!!.printRequests)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's sourceReference is equal to the given one.
     * @param sourceReference the given sourceReference to compare the actual Certificate's sourceReference to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Certificate's sourceReference is not equal to the given one.
     */
    fun hasSourceReference(sourceReference: String?): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting sourceReference of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualSourceReference = actual!!.sourceReference
        if (!Objects.deepEquals(actualSourceReference, sourceReference)) {
            failWithMessage(assertjErrorMessage, actual, sourceReference, actualSourceReference)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's sourceType is equal to the given one.
     * @param sourceType the given sourceType to compare the actual Certificate's sourceType to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Certificate's sourceType is not equal to the given one.
     */
    fun hasSourceType(sourceType: SourceType?): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting sourceType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualSourceType = actual!!.sourceType
        if (!Objects.deepEquals(actualSourceType, sourceType)) {
            failWithMessage(assertjErrorMessage, actual, sourceType, actualSourceType)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's status is equal to the given one.
     * @param status the given status to compare the actual Certificate's status to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Certificate's status is not equal to the given one.
     */
    fun hasStatus(status: Status?): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting status of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualStatus = actual!!.status
        if (!Objects.deepEquals(actualStatus, status)) {
            failWithMessage(assertjErrorMessage, actual, status, actualStatus)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's suggestedExpiryDate is equal to the given one.
     * @param suggestedExpiryDate the given suggestedExpiryDate to compare the actual Certificate's suggestedExpiryDate to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Certificate's suggestedExpiryDate is not equal to the given one.
     */
    fun hasSuggestedExpiryDate(suggestedExpiryDate: LocalDate?): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting suggestedExpiryDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualSuggestedExpiryDate = actual!!.suggestedExpiryDate
        if (!Objects.deepEquals(actualSuggestedExpiryDate, suggestedExpiryDate)) {
            failWithMessage(assertjErrorMessage, actual, suggestedExpiryDate, actualSuggestedExpiryDate)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's vacNumber is not null and has expected pattern.
     * @return this assertion object.
     * @throws AssertionError - if the actual Certificate's vacNumber is null or does not match pattern.
     */
    fun hasVacNumber(): CertificateAssert {
        // check that actual PrintRequest we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting vacNumber of:\n  <%s>\nto contain pattern:\n  ^[A-Za-z\\d]{20}\$\nbut was:\n  <%s>"

        // null safe check
        val actualVacNumber = actual!!.vacNumber
        assertThat(actualVacNumber)
            .overridingErrorMessage(assertjErrorMessage, actual, actualVacNumber)
            .containsPattern(Regex("^[A-Za-z\\d]{20}\$").pattern)

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's vacNumber is equal to the given one.
     * @param vacNumber the given vacNumber to compare the actual Certificate's vacNumber to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Certificate's vacNumber is not equal to the given one.
     */
    fun hasVacNumber(vacNumber: String?): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting vacNumber of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualVacNumber = actual!!.vacNumber
        if (!Objects.deepEquals(actualVacNumber, vacNumber)) {
            failWithMessage(assertjErrorMessage, actual, vacNumber, actualVacNumber)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's version is not null.
     * @return this assertion object.
     * @throws AssertionError - if the actual Certificate's version is null.
     */
    fun hasVersion(): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting version of:\n  <%s>\nto be non-null"

        assertThat(actual!!.createdBy)
            .overridingErrorMessage(assertjErrorMessage, actual)
            .isNotNull

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Certificate's version is equal to the given one.
     * @param version the given version to compare the actual Certificate's version to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Certificate's version is not equal to the given one.
     */
    fun hasVersion(version: Long?): CertificateAssert {
        // check that actual Certificate we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting version of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualVersion = actual!!.version
        if (!Objects.deepEquals(actualVersion, version)) {
            failWithMessage(assertjErrorMessage, actual, version, actualVersion)
        }

        // return the current assertion for method chaining
        return this
    }

    companion object {
        /**
         * An entry point for CertificateAssert to follow AssertJ standard `assertThat()` statements.<br></br>
         * With a static import, one can write directly: `assertThat(myCertificate)` and get specific assertion with code completion.
         * @param actual the Certificate we want to make assertions on.
         * @return a new `[CertificateAssert]`
         */
        @CheckReturnValue
        fun assertThat(actual: Certificate?): CertificateAssert {
            return CertificateAssert(actual)
        }
    }
}
