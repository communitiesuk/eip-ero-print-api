package uk.gov.dluhc.printapi.testsupport.assertj.assertions

import org.assertj.core.api.AbstractObjectAssert
import org.assertj.core.api.Assertions
import org.assertj.core.util.CheckReturnValue
import uk.gov.dluhc.printapi.database.entity.Address
import uk.gov.dluhc.printapi.database.entity.AddressFormat
import uk.gov.dluhc.printapi.database.entity.Delivery
import uk.gov.dluhc.printapi.database.entity.DeliveryAddressType
import uk.gov.dluhc.printapi.database.entity.DeliveryClass
import java.time.Instant
import java.time.temporal.ChronoUnit
import java.util.Objects
import java.util.UUID
import javax.annotation.Generated

/**
 * [Delivery] specific assertions - Generated by CustomAssertionGenerator.
 */
@Generated(value = ["assertj-assertions-generator"])
class DeliveryAssert
/**
 * Creates a new `[DeliveryAssert]` to make assertions on actual Delivery.
 * @param actual the Delivery we want to make assertions on.
 */
(actual: Delivery?) :
    AbstractObjectAssert<DeliveryAssert?, Delivery?>(
        actual,
        DeliveryAssert::class.java
    ) {
    /**
     * Verifies that the actual Delivery's address is equal to the given one.
     * @param address the given address to compare the actual Delivery's address to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Delivery's address is not equal to the given one.
     */
    fun hasAddress(address: Address): DeliveryAssert {
        // check that actual Delivery we want to make assertions on is not null.
        isNotNull

        AddressAssert(actual!!.address)
            .hasId()
            .hasStreet(address.street)
            .hasPostcode(address.postcode)
            .hasProperty(address.property)
            .hasLocality(address.locality)
            .hasTown(address.town)
            .hasArea(address.area)
            .hasUprn(address.uprn)
            .hasDateCreated()
            .hasCreatedBy()
            .hasVersion()

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Delivery's addressFormat is equal to the given one.
     * @param addressFormat the given addressFormat to compare the actual Delivery's addressFormat to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Delivery's addressFormat is not equal to the given one.
     */
    fun hasAddressFormat(addressFormat: AddressFormat?): DeliveryAssert {
        // check that actual Delivery we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting addressFormat of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualAddressFormat = actual!!.addressFormat
        if (!Objects.deepEquals(actualAddressFormat, addressFormat)) {
            failWithMessage(assertjErrorMessage, actual, addressFormat, actualAddressFormat)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Delivery's addressee is equal to the given one.
     * @param addressee the given addressee to compare the actual Delivery's addressee to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Delivery's addressee is not equal to the given one.
     */
    fun hasAddressee(addressee: String?): DeliveryAssert {
        // check that actual Delivery we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting addressee of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualAddressee = actual!!.addressee
        if (!Objects.deepEquals(actualAddressee, addressee)) {
            failWithMessage(assertjErrorMessage, actual, addressee, actualAddressee)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Delivery's createdBy is not null.
     * @return this assertion object.
     * @throws AssertionError - if the actual Delivery's createdBy is not equal to the given one.
     */
    fun hasCreatedBy(): DeliveryAssert {
        // check that actual Delivery we want to make assertions on is not null.
        isNotNull

        val assertjErrorMessage =
            "\nExpecting createdBy of:\n  <%s>\nto be non-null"

        val actualDateCreated = actual!!.createdBy
        Assertions.assertThat(actualDateCreated)
            .overridingErrorMessage(assertjErrorMessage, actual)
            .isNotNull

        return this
    }

    /**
     * Verifies that the actual Delivery's createdBy is equal to the given one.
     * @param createdBy the given createdBy to compare the actual Delivery's createdBy to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Delivery's createdBy is not equal to the given one.
     */
    fun hasCreatedBy(createdBy: String?): DeliveryAssert {
        // check that actual Delivery we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting createdBy of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualCreatedBy = actual!!.createdBy
        if (!Objects.deepEquals(actualCreatedBy, createdBy)) {
            failWithMessage(assertjErrorMessage, actual, createdBy, actualCreatedBy)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Delivery's dateCreated is not null.
     * @param dateCreated the given dateCreated to compare the actual Delivery's dateCreated to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Delivery's dateCreated is not equal to the given one.
     */
    fun hasDateCreated(): DeliveryAssert {
        // check that actual Address we want to make assertions on is not null.
        isNotNull

        val assertjErrorMessage =
            "\nExpecting dateCreated of:\n  <%s>\nto be non-null"

        val actualDateCreated = actual!!.dateCreated
        Assertions.assertThat(actualDateCreated)
            .overridingErrorMessage(assertjErrorMessage, actual)
            .isNotNull

        return this
    }

    /**
     * Verifies that the actual Delivery's dateCreated is equal within margin of seconds to the given one.
     * @param dateCreated the given dateCreated to compare the actual Delivery's dateCreated to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Delivery's dateCreated is not equal to the given one.
     */
    fun hasDateCreated(dateCreated: Instant?, margin: Long = 5): DeliveryAssert {
        // check that actual Address we want to make assertions on is not null.
        isNotNull

        val assertjErrorMessage =
            "\nExpecting dateCreated of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        val actualDateCreated = actual!!.dateCreated
        Assertions.assertThat(actualDateCreated)
            .overridingErrorMessage(
                assertjErrorMessage,
                actual,
                actualDateCreated,
                dateCreated
            )
            .isCloseTo(dateCreated, Assertions.within(margin, ChronoUnit.SECONDS))

        return this
    }

    /**
     * Verifies that the actual Delivery's deliveryAddressType is equal to the given one.
     * @param deliveryAddressType the given deliveryAddressType to compare the actual Delivery's deliveryAddressType to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Delivery's deliveryAddressType is not equal to the given one.
     */
    fun hasDeliveryAddressType(deliveryAddressType: DeliveryAddressType?): DeliveryAssert {
        // check that actual Delivery we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting deliveryAddressType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualDeliveryAddressType = actual!!.deliveryAddressType
        if (!Objects.deepEquals(actualDeliveryAddressType, deliveryAddressType)) {
            failWithMessage(assertjErrorMessage, actual, deliveryAddressType, actualDeliveryAddressType)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Delivery's deliveryClass is equal to the given one.
     * @param deliveryClass the given deliveryClass to compare the actual Delivery's deliveryClass to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Delivery's deliveryClass is not equal to the given one.
     */
    fun hasDeliveryClass(deliveryClass: DeliveryClass?): DeliveryAssert {
        // check that actual Delivery we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting deliveryClass of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualDeliveryClass = actual!!.deliveryClass
        if (!Objects.deepEquals(actualDeliveryClass, deliveryClass)) {
            failWithMessage(assertjErrorMessage, actual, deliveryClass, actualDeliveryClass)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Delivery's id is not null.
     * @return this assertion object.
     * @throws AssertionError - if the actual Delivery's id is null.
     */
    fun hasId(): DeliveryAssert {
        // check that actual Delivery we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be non-null"

        Assertions.assertThat(actual!!.id)
            .overridingErrorMessage(assertjErrorMessage, actual)
            .isNotNull

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Delivery's id is equal to the given one.
     * @param id the given id to compare the actual Delivery's id to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Delivery's id is not equal to the given one.
     */
    fun hasId(id: UUID?): DeliveryAssert {
        // check that actual Delivery we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualId = actual!!.id
        if (!Objects.deepEquals(actualId, id)) {
            failWithMessage(assertjErrorMessage, actual, id, actualId)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual Delivery's version is not null.
     * @return this assertion object.
     * @throws AssertionError - if the actual Delivery's version is not equal to the given one.
     */
    fun hasVersion(): DeliveryAssert {
        // check that actual Delivery we want to make assertions on is not null.
        isNotNull

        val assertjErrorMessage =
            "\nExpecting version of:\n  <%s>\nto be non-null"

        val actualDateCreated = actual!!.version
        Assertions.assertThat(actualDateCreated)
            .overridingErrorMessage(assertjErrorMessage, actual)
            .isNotNull

        return this
    }

    /**
     * Verifies that the actual Delivery's version is equal to the given one.
     * @param version the given version to compare the actual Delivery's version to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Delivery's version is not equal to the given one.
     */
    fun hasVersion(version: Long?): DeliveryAssert {
        // check that actual Delivery we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting version of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualVersion = actual!!.version
        if (!Objects.deepEquals(actualVersion, version)) {
            failWithMessage(assertjErrorMessage, actual, version, actualVersion)
        }

        // return the current assertion for method chaining
        return this
    }

    companion object {
        /**
         * An entry point for DeliveryAssert to follow AssertJ standard `assertThat()` statements.<br></br>
         * With a static import, one can write directly: `assertThat(myDelivery)` and get specific assertion with code completion.
         * @param actual the Delivery we want to make assertions on.
         * @return a new `[DeliveryAssert]`
         */
        @CheckReturnValue
        fun assertThat(actual: Delivery?): DeliveryAssert {
            return DeliveryAssert(actual)
        }
    }
}
