package uk.gov.dluhc.printapi.testsupport.assertj.assertions

import org.assertj.core.api.AbstractObjectAssert
import org.assertj.core.api.Assertions
import org.assertj.core.util.CheckReturnValue
import uk.gov.dluhc.printapi.database.entity.Address
import uk.gov.dluhc.printapi.database.entity.ElectoralRegistrationOffice
import java.time.Instant
import java.time.temporal.ChronoUnit
import java.util.Objects
import java.util.UUID
import javax.annotation.Generated

/**
 * [ElectoralRegistrationOffice] specific assertions - Generated by CustomAssertionGenerator.
 */
@Generated(value = ["assertj-assertions-generator"])
class ElectoralRegistrationOfficeAssert
/**
 * Creates a new `[ElectoralRegistrationOfficeAssert]` to make assertions on actual ElectoralRegistrationOffice.
 * @param actual the ElectoralRegistrationOffice we want to make assertions on.
 */
(actual: ElectoralRegistrationOffice?) :
    AbstractObjectAssert<ElectoralRegistrationOfficeAssert?, ElectoralRegistrationOffice?>(
        actual,
        ElectoralRegistrationOfficeAssert::class.java
    ) {
    /**
     * Verifies that the actual ElectoralRegistrationOffice's address is equal to the given one.
     * @param address the given address to compare the actual ElectoralRegistrationOffice's address to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ElectoralRegistrationOffice's address is not equal to the given one.
     */
    fun hasAddress(address: Address): ElectoralRegistrationOfficeAssert {
        // check that actual ElectoralRegistrationOffice we want to make assertions on is not null.
        isNotNull

        AddressAssert(actual!!.address)
            .hasId()
            .hasStreet(address.street)
            .hasPostcode(address.postcode)
            .hasProperty(address.property)
            .hasLocality(address.locality)
            .hasTown(address.town)
            .hasArea(address.area)
            .hasUprn(address.uprn)
            .hasDateCreated()
            .hasCreatedBy()
            .hasVersion()

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual ElectoralRegistrationOffice's createdBy is not null.
     * @return this assertion object.
     * @throws AssertionError - if the actual ElectoralRegistrationOffice's createdBy is null.
     */
    fun hasCreatedBy(): ElectoralRegistrationOfficeAssert {
        // check that actual ElectoralRegistrationOffice we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting dateCreated of:\n  <%s>\nto be non-null"

        Assertions.assertThat(actual!!.createdBy)
            .overridingErrorMessage(assertjErrorMessage, actual)
            .isNotNull

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual ElectoralRegistrationOffice's createdBy is equal to the given one.
     * @param createdBy the given createdBy to compare the actual ElectoralRegistrationOffice's createdBy to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ElectoralRegistrationOffice's createdBy is not equal to the given one.
     */
    fun hasCreatedBy(createdBy: String?): ElectoralRegistrationOfficeAssert {
        // check that actual ElectoralRegistrationOffice we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting createdBy of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualCreatedBy = actual!!.createdBy
        if (!Objects.deepEquals(actualCreatedBy, createdBy)) {
            failWithMessage(assertjErrorMessage, actual, createdBy, actualCreatedBy)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual ElectoralRegistrationOffice's dateCreated is not null.
     * @return this assertion object.
     * @throws AssertionError - if the actual ElectoralRegistrationOffice's dateCreated is null.
     */
    fun hasDateCreated(): ElectoralRegistrationOfficeAssert {
        // check that actual ElectoralRegistrationOffice we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting dateCreated of:\n  <%s>\nto be non-null"

        Assertions.assertThat(actual!!.dateCreated)
            .overridingErrorMessage(assertjErrorMessage, actual)
            .isNotNull

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual ElectoralRegistrationOffice's dateCreated is equal within margin to the given one.
     * @param dateCreated the given dateCreated to compare the actual ElectoralRegistrationOffice's dateCreated to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ElectoralRegistrationOffice's dateCreated is not equal to the given one.
     */
    fun hasDateCreated(dateCreated: Instant?, margin: Long = 5): ElectoralRegistrationOfficeAssert {
        // check that actual ElectoralRegistrationOffice we want to make assertions on is not null.
        isNotNull

        val assertjErrorMessage =
            "\nExpecting dateCreated of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        val actualDateCreated = actual!!.dateCreated
        Assertions.assertThat(actualDateCreated)
            .overridingErrorMessage(
                assertjErrorMessage,
                actual,
                actualDateCreated,
                dateCreated
            )
            .isCloseTo(dateCreated, Assertions.within(margin, ChronoUnit.SECONDS))

        return this
    }

    /**
     * Verifies that the actual ElectoralRegistrationOffice's emailAddress is equal to the given one.
     * @param emailAddress the given emailAddress to compare the actual ElectoralRegistrationOffice's emailAddress to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ElectoralRegistrationOffice's emailAddress is not equal to the given one.
     */
    fun hasEmailAddress(emailAddress: String?): ElectoralRegistrationOfficeAssert {
        // check that actual ElectoralRegistrationOffice we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting emailAddress of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualEmailAddress = actual!!.emailAddress
        if (!Objects.deepEquals(actualEmailAddress, emailAddress)) {
            failWithMessage(assertjErrorMessage, actual, emailAddress, actualEmailAddress)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual ElectoralRegistrationOffice's id is not null.
     * @return this assertion object.
     * @throws AssertionError - if the actual ElectoralRegistrationOffice's id is null.
     */
    fun hasId(): ElectoralRegistrationOfficeAssert {
        // check that actual ElectoralRegistrationOffice we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be non-null"

        Assertions.assertThat(actual!!.id)
            .overridingErrorMessage(assertjErrorMessage, actual)
            .isNotNull

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual ElectoralRegistrationOffice's id is equal to the given one.
     * @param id the given id to compare the actual ElectoralRegistrationOffice's id to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ElectoralRegistrationOffice's id is not equal to the given one.
     */
    fun hasId(id: UUID?): ElectoralRegistrationOfficeAssert {
        // check that actual ElectoralRegistrationOffice we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualId = actual!!.id
        if (!Objects.deepEquals(actualId, id)) {
            failWithMessage(assertjErrorMessage, actual, id, actualId)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual ElectoralRegistrationOffice's name is equal to the given one.
     * @param name the given name to compare the actual ElectoralRegistrationOffice's name to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ElectoralRegistrationOffice's name is not equal to the given one.
     */
    fun hasName(name: String?): ElectoralRegistrationOfficeAssert {
        // check that actual ElectoralRegistrationOffice we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualName = actual!!.name
        if (!Objects.deepEquals(actualName, name)) {
            failWithMessage(assertjErrorMessage, actual, name, actualName)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual ElectoralRegistrationOffice's phoneNumber is equal to the given one.
     * @param phoneNumber the given phoneNumber to compare the actual ElectoralRegistrationOffice's phoneNumber to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ElectoralRegistrationOffice's phoneNumber is not equal to the given one.
     */
    fun hasPhoneNumber(phoneNumber: String?): ElectoralRegistrationOfficeAssert {
        // check that actual ElectoralRegistrationOffice we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting phoneNumber of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualPhoneNumber = actual!!.phoneNumber
        if (!Objects.deepEquals(actualPhoneNumber, phoneNumber)) {
            failWithMessage(assertjErrorMessage, actual, phoneNumber, actualPhoneNumber)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual ElectoralRegistrationOffice's version is not null.
     * @return this assertion object.
     * @throws AssertionError - if the actual ElectoralRegistrationOffice's version is null.
     */
    fun hasVersion(): ElectoralRegistrationOfficeAssert {
        // check that actual ElectoralRegistrationOffice we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting dateCreated of:\n  <%s>\nto be non-null"

        Assertions.assertThat(actual!!.version)
            .overridingErrorMessage(assertjErrorMessage, actual)
            .isNotNull

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual ElectoralRegistrationOffice's version is equal to the given one.
     * @param version the given version to compare the actual ElectoralRegistrationOffice's version to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ElectoralRegistrationOffice's version is not equal to the given one.
     */
    fun hasVersion(version: Long?): ElectoralRegistrationOfficeAssert {
        // check that actual ElectoralRegistrationOffice we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting version of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualVersion = actual!!.version
        if (!Objects.deepEquals(actualVersion, version)) {
            failWithMessage(assertjErrorMessage, actual, version, actualVersion)
        }

        // return the current assertion for method chaining
        return this
    }

    /**
     * Verifies that the actual ElectoralRegistrationOffice's website is equal to the given one.
     * @param website the given website to compare the actual ElectoralRegistrationOffice's website to.
     * @return this assertion object.
     * @throws AssertionError - if the actual ElectoralRegistrationOffice's website is not equal to the given one.
     */
    fun hasWebsite(website: String?): ElectoralRegistrationOfficeAssert {
        // check that actual ElectoralRegistrationOffice we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting website of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualWebsite = actual!!.website
        if (!Objects.deepEquals(actualWebsite, website)) {
            failWithMessage(assertjErrorMessage, actual, website, actualWebsite)
        }

        // return the current assertion for method chaining
        return this
    }

    companion object {
        /**
         * An entry point for ElectoralRegistrationOfficeAssert to follow AssertJ standard `assertThat()` statements.<br></br>
         * With a static import, one can write directly: `assertThat(myElectoralRegistrationOffice)` and get specific assertion with code completion.
         * @param actual the ElectoralRegistrationOffice we want to make assertions on.
         * @return a new `[ElectoralRegistrationOfficeAssert]`
         */
        @CheckReturnValue
        fun assertThat(actual: ElectoralRegistrationOffice?): ElectoralRegistrationOfficeAssert {
            return ElectoralRegistrationOfficeAssert(actual)
        }
    }
}
