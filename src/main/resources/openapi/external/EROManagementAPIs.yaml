openapi: 3.0.0
security:
  - bearerAuth: []
info:
  title: EROManagementAPIs
  version: '1.8.0'
  description: API for viewing and managing ERO Users and ERO Details.
  contact:
    name: Krister Bone
    email: krister.bone@valtech.com
servers:
  - url: 'http://localhost:3000'
#
# --------------------------------------------------------------------------------
#
paths:
  #
  # --------------------------------------------------------------------------------
  # RESTful style endpoints start here
  # --------------------------------------------------------------------------------
  #

  #
  # Electoral Registration Offices
  # --------------------------------------------------------------------------------
  /eros:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Electoral Registration Offices
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    get:
      summary: List EROs, optionally filtered by gssCode
      operationId: get-eros
      tags:
        - Electoral Registration Offices
      parameters:
        - schema:
            type: string
          name: gssCode
          in: query
          required: false
      responses:
        '200':
          $ref: '#/components/responses/ElectoralRegistrationOffices'
      description: |-
        List EROs, optionally filtered by gssCode
        Publicly available, not sensitive data and needed by DLUHC admins in different user pool.
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: ${base_uri}/eros
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: ${vpc_connection_id}
        httpMethod: GET
  '/eros/{eroId}':
    parameters:
      - schema:
          type: string
        name: eroId
        in: path
        required: true
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Electoral Registration Offices
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    get:
      summary: Return an ERO by its ID
      tags:
        - Electoral Registration Offices
      responses:
        '200':
          $ref: '#/components/responses/ElectoralRegistrationOffice'
      operationId: get-ero
      description: |-
        Get an Electoral Registration Office by its ID.
      security:
        - eroUserCognitoUserPoolAuthorizer: []
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: ${base_uri}/eros/{eroId}
        requestParameters:
          integration.request.path.eroId: "method.request.path.eroId"
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: ${vpc_connection_id}
        httpMethod: GET

  #
  # Users within an Electoral Registration Office
  # --------------------------------------------------------------------------------
  '/eros/{eroId}/users':
    parameters:
      - schema:
          type: string
        name: eroId
        in: path
        required: true
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Electoral Registration Office Users
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    get:
      summary: Return all users within an ERO
      tags:
        - Electoral Registration Office Users
      responses:
        '200':
          $ref: '#/components/responses/Users'
        '403':
          description: Forbidden
      operationId: get-ero-users
      description: |-
        Secured by ERO Cognito User Pool 
        - users need to be in `ero-admin-{eroId}` group to call the endpoint WITHOUT the "role" query parameter.
        - users need to be in either `ero-vc-admin-{eroId}` or `ero-vc-anonymous-admin-{eroId}` group to call the endpoint WITH the "role" query parameter. The groups attribute of returned users will only contain the role in the query parameter.
        
        Get list of users from Cognito within the ERO district base group and optionally filter users by role.
        The only roles that can be used as a filter are `vc-admin` or `vc-anonymous-admin`.
        
        See https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ListUsersInGroup.html
      parameters:
        - name: role
          description: Filter by the user's role. Only a user in the `ero-vc-admin-{eroId}` or `ero-vc-anonymous-admin-{eroId}` group can pass the `role` query parameter. `vc-admin` and `vc-anonymous-admin` are the only values supported by this parameter.
          schema:
            $ref: '#/components/schemas/FilterUsersByRole'
          example: vc-admin
          in: query
          required: false
      security:
        - eroUserCognitoUserPoolAuthorizer: []
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: ${base_uri}/eros/{eroId}/users
        requestParameters:
          integration.request.path.eroId: "method.request.path.eroId"
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: ${vpc_connection_id}
        httpMethod: GET
  '/eros/{eroId}/users/{userId}':
    parameters:
      - schema:
          type: string
        name: eroId
        in: path
        required: true
      - schema:
          type: string
        name: userId
        in: path
        required: true
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Electoral Registration Office Users
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    get:
      summary: Return the specified user including their roles within the ERO
      tags:
        - Electoral Registration Office Users
      responses:
        '200':
          $ref: '#/components/responses/Users'
        '403':
          description: Forbidden
        '404':
          description: The specified User was not found
      operationId: get-ero-user
      description: |-
        Secured by ERO Cognito User Pool 
        - users need to be in ero-admin-{eroId} group to call the endpoint.
        
        Returns the User from Cognito. If the user does not exist a 404 is returned. The User is returned complete
        with their group membership for the specified ERO. If the User exists but has no group memberships in the 
        specified ERO the User is returned with an empty `groups` array.
      security:
        - eroUserCognitoUserPoolAuthorizer: []
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: ${base_uri}/eros/{eroId}/users/{userId}
        requestParameters:
          integration.request.path.eroId: "method.request.path.eroId"
          integration.request.path.userId: "method.request.path.userId"
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: ${vpc_connection_id}
        httpMethod: GET
    delete:
      summary: Remove the user from all groups associated with the ERO and delete if they are not in any other EROs
      tags:
        - Electoral Registration Office Users
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
        '404':
          description: The specified User was not found
      description: |-
        Secured by ERO Cognito User Pool 
        - users need to be in ero-admin-{eroId} group to call the endpoint.
        
        Returns the User from all groups associated with the specified ERO.
      security:
        - eroUserCognitoUserPoolAuthorizer: []
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: ${base_uri}/eros/{eroId}/users/{userId}
        requestParameters:
          integration.request.path.eroId: "method.request.path.eroId"
          integration.request.path.userId: "method.request.path.userId"
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: ${vpc_connection_id}
        httpMethod: DELETE


  '/eros/{eroId}/users/{userId}/groups':
    parameters:
      - schema:
          type: string
        name: eroId
        in: path
        required: true
      - schema:
          type: string
        name: userId
        in: path
        required: true
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Electoral Registration Office Users
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    put:
      summary: Add User to Group(s)
      operationId: add-ero-user-to-groups
      tags:
        - Electoral Registration Office Users
      responses:
        '200':
          $ref: '#/components/responses/User'
        '400':
          description: Bad Request Invalid Group
        '403':
          description: Forbidden
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/EroGroup'
      description: Replaces the users groups for this ERO with the groups provided.
      security:
        - eroUserCognitoUserPoolAuthorizer: []
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: ${base_uri}/eros/{eroId}/users/{userId}/groups
        requestParameters:
          integration.request.path.eroId: "method.request.path.eroId"
          integration.request.path.userId: "method.request.path.userId"
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: ${vpc_connection_id}
        httpMethod: PUT

  #
  # Users
  # --------------------------------------------------------------------------------
  /users:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Users
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    post:
      summary: Create user in ERO Cognito User Pool
      operationId: create-user
      tags:
        - Users
      responses:
        '201':
          $ref: '#/components/responses/User'
      description: |-
        Secured by ERO Cognito User Pool
        Create a user regardless in the ERO
        Fails silently if user already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
        description: New user details
      security:
        - eroUserCognitoUserPoolAuthorizer: []
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: ${base_uri}/users
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: ${vpc_connection_id}
        httpMethod: POST

  '/users/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    options:
      deprecated: true
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Users
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    get:
      deprecated: true
      summary: Get user by ID (email address)
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/User'
        '404':
          description: User not found
      operationId: get-user
      description: |-
        Secured by ERO Cognito User Pool
        Gets a user by email address
        Secured by ero-admin-*
        
        This API has been deprecated. Please use `GET /eros/{eroId}/users/{userId}` instead.
      security:
        - eroUserCognitoUserPoolAuthorizer: []
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: ${base_uri}/users/{userId}
        requestParameters:
          integration.request.path.userId: "method.request.path.userId"
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: ${vpc_connection_id}
        httpMethod: GET

  '/users/{userId}/reinvite':
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Users
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: Reinvite user to ERO Cognito User Pool
      operationId: reinvite-user
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/User'
      description: |-
        Secured by ERO Cognito User Pool
        Reinvite a user to the ERO
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserReinvitationRequest'
      security:
        - eroUserCognitoUserPoolAuthorizer: []
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: ${base_uri}/users/{userId}/reinvite
        requestParameters:
          integration.request.path.userId: "method.request.path.userId"
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: ${vpc_connection_id}
        httpMethod: POST

  #
  # Current user
  # --------------------------------------------------------------------------------
  /user/eros:
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - Current User
      responses:
        200:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: { }
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}
    get:
      summary: Returns a list of the EROs the current user is a member of.
      tags:
        - Current User
      responses:
        '200':
          $ref: '#/components/responses/ElectoralRegistrationOffices'
        '401':
          description: Unauthorised
      operationId: get-user-eros
      description: |-
        Secured by ERO Cognito User Pool
        Returns a list of the EROs the current user is a member of.
      security:
        - eroUserCognitoUserPoolAuthorizer: []
      x-amazon-apigateway-integration:
        type: HTTP_PROXY
        uri: ${base_uri}/user/eros
        responseParameters:
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
          method.response.header.Access-Control-Allow-Methods: '''*'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
        connectionType: VPC_LINK
        connectionId: ${vpc_connection_id}
        httpMethod: GET

#
# --------------------------------------------------------------------------------
#
components:
  #
  # Schema and Enum Definitions
  # --------------------------------------------------------------------------------
  schemas:
    UserResponse:
      title: UserResponse
      type: object
      description: Response for a single User
      example:
        firstName: Alice
        surname: Smith
        email: alice.smith@gmail.com
        phoneNumber: '079701234566'
        groups: [
          oe-viewer
        ]
        status: "CONFIRMED"
      properties:
        email:
          type: string
        phoneNumber:
          type: string
        firstName:
          type: string
        surname:
          type: string
        groups:
          type: array
          items:
            type: string
        status:
          type: string
    UsersResponse:
      title: UsersResponse
      type: object
      description: Response containing an array of Users
      example:
        users: [
          {
            firstName: Alice,
            surname: Smith,
            email: alice.smith@gmail.com,
            phoneNumber: '+44079701234566',
            groups: [
              oe-viewer
            ],
            status: "CONFIRMED"
          },
          {
            firstName: John,
            surname: Smith,
            email: john.smith@gmail.com,
            phoneNumber: '+44079701234566',
            groups: [
              oe-viewer, vc-admin
            ],
            status: "UNCONFIRMED"
          }
        ]
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
    UserRequest:
      title: UserRequest
      type: object
      description: Create AWS Cognito User Request
      example:
        firstName: Alice
        surname: Smith
        email: alice.smith@gmail.com
        phoneNumber: '079701234566'
      properties:
        email:
          type: string
          format: email
        phoneNumber:
          type: string
          pattern: ^(\+\d+|)$
        firstName:
          type: string
          minLength: 2
          maxLength: 255
        surname:
          type: string
          minLength: 2
          maxLength: 255
      required:
        - email
        - firstName
        - surname
    UserReinvitationRequest:
      title: UserReinvitationRequest
      type: object
      description: Reinvite AWS Cognito User Request
      example:
        email: alice.smith@gmail.com
      properties:
        email:
          type: string
          format: email
      required:
        - email
    EroGroup:
      title: EroGroup
      type: string
      description: Enumeration of allowed ERO groups
      enum:
        - admin
        - vc-admin
        - vc-anonymous-admin
        - vc-viewer
        - postal-admin
        - postal-viewer
        - proxy-admin
        - proxy-viewer
        - oe-admin
        - oe-viewer
    LocalAuthorityResponse:
      title: LocalAuthorityResponse
      type: object
      description: Response for a single Local Authority
      example:
        gssCode: 'W06000001'
        name: 'Isle of Anglesey County Council'
        displayName: 'Isle of Anglesey County Council'
        isActive: true,
        custodianCode: 5570,
        contactDetailsEnglish:
          {
            name: "Isle of Anglesey County Council",
            phoneNumber: "01248 752548",
            website: "http://www.anglesey.gov.uk/council-and-democracy/councillors-democracy-and-elections/electoral-register-elections-and-voting-/",
            email: "shxcs@ynysmon.gov.uk",
            address: {
              street: "Isle of Anglesey County Council",
              property: "Council offices",
              town: "Llangefni",
              area: "Anglesey",
              postcode: "LL77 7TW",
            }
          }
        contactDetailsWelsh:
          {
            name: "Cyngor Sir Ynys Môn",
            phoneNumber: "(01248) 750057",
            website: "https://www.ynysmon.llyw.cymru/cy/Cyngor/Pleidleisio-ac-etholiadau/Cofrestru-etholiadol/Cofrestru-i-bleidleisio.aspx",
            email: "shxcs@ynysmon.gov.uk",
            address: {
              street: "Cyngor Sir Ynys Môn",
              property: "Swyddfa’r Cyndor",
              town: "Llangefni",
              area: "Ynys Môn",
              postcode: "LL77 7TW",
            }
          }
      properties:
        gssCode:
          type: string
        name:
          type: string
          description: Legal name of the Local Authority that must be included on the certificate, in English.
        displayName:
          type: string
          description: Non-legal name of the Local Authority that can be used for display purposes, in English.
        isActive:
          type: boolean
          default: true
          description: >
            If false, this LA can no longer receive applications, but might have
            applications in progress or old applications stored.
            This is intended to be used when a Local Authority has ceased to exist
            due to a boundary change or a merger of multiple LAs.
        custodianCode:
          description: >
            The "LOCAL_CUSTODIAN_CODE" that OSPlaces assigns to this Local Authority. Allows a postcode lookup
            (using OSPlaces) of an elector's address to be matched against the correct Local Authority.
            This is an optional field. Not all Local Authorities will have a custodian code assigned in IER, for example
            in-active Local Authorities may not have a custodian code.
          type: integer
        contactDetailsEnglish:
          $ref: '#/components/schemas/ContactDetails'
        contactDetailsWelsh:
          $ref: '#/components/schemas/ContactDetails'
      required:
        - gssCode
        - name
        - displayName
        - isActive
        - contactDetailsEnglish
    ContactDetails:
      title: ContactDetails
      type: object
      description: Contact details for an ERO
      properties:
        name:
          type: string
          description: Common name of the Local Authority.
          example: Isle of Anglesey County Council
        nameVac:
          type: string
          description: The legal name of the Local Authority as it will appear on printed certificates.
          example: Isle of Anglesey County Council
        website:
          type: string
          example: "https://ero-address.com"
        websiteVac:
          type: string
          example: "https://voter-id.ero-address.com"
        phone:
          type: string
          example: 01234 567890
        email:
          type: string
          example: fred.blogs@some-domain.co.uk
        emailVac:
          type: string
          example: voterid@some-domain.co.uk
        address:
          $ref: '#/components/schemas/Address'
      required:
        - name
        - nameVac
        - website
        - websiteVac
        - phone
        - email
        - address
    Address:
      title: Address
      description: Address format used throughout gov.uk voter services.
      type: object
      x-examples:
        Minimum data:
          street: Street 1
          postcode: PC1 2FB
        Normal Address:
          street: East Lodge
          property: Balruddery
          locality: Invergowrie
          town: Dundee
          area: Angus
          postcode: DD25LF
          uprn: '117095813'
      properties:
        street:
          type: string
          maxLength: 255
        property:
          type: string
          maxLength: 255
        locality:
          type: string
          maxLength: 255
        town:
          type: string
          maxLength: 255
        area:
          type: string
          maxLength: 255
        postcode:
          type: string
          maxLength: 10
        uprn:
          type: string
          description: Unique Property Reference Number consisting of up to 12 digits in length
          pattern: '^\d{1,12}$'
      required:
        - street
        - postcode
    ElectoralRegistrationOfficeResponse:
      title: ElectoralRegistrationOfficeResponse
      type: object
      description: Response for a single Electoral Registration Office
      example:
        id: 'isle-of-anglesey-council'
        name: 'Isle of Anglesey Council'
        localAuthorities: [
          {
            gssCode: 'W06000001',
            name: 'Isle of Anglesey County Council',
            isActive: true,
            custodianCode: 5570,
            contactDetailsEnglish:
              {
                name: 'Isle of Anglesey County Council',
                phoneNumber: "01248 752548",
                website: "http://www.anglesey.gov.uk/council-and-democracy/councillors-democracy-and-elections/electoral-register-elections-and-voting-/",
                email: "shxcs@ynysmon.gov.uk",
                address: {
                  street: "Isle of Anglesey County Council",
                  property: "Council offices",
                  town: "Llangefni",
                  area: "Anglesey",
                  postcode: "LL77 7TW",
                }
              },
            contactDetailsWelsh:
              {
                name: 'Cyngor Sir Ynys Môn',
                phoneNumber: "(01248) 750057",
                website: "https://www.ynysmon.llyw.cymru/cy/Cyngor/Pleidleisio-ac-etholiadau/Cofrestru-etholiadol/Cofrestru-i-bleidleisio.aspx",
                email: "shxcs@ynysmon.gov.uk",
                address: {
                  street: "Cyngor Sir Ynys Môn",
                  property: "Swyddfa’r Cyndor",
                  town: "Llangefni",
                  area: "Ynys Môn",
                  postcode: "LL77 7TW",
                }
              }
          }
        ]
        roles: [
          "vc-admin",
          "admin"
        ]
      properties:
        id:
          type: string
        name:
          type: string
        localAuthorities:
          type: array
          items:
            $ref: '#/components/schemas/LocalAuthorityResponse'
        roles:
          description: Optional list of roles that an authenticated user has for the given Electoral Registration Office. Only populated when the API is called by an authenticated user.
          type: array
          items:
            type: string
      required:
        - id
        - name
        - localAuthorities
        - contactDetailsEnglish
    ElectoralRegistrationOfficesResponse:
      title: ElectoralRegistrationOfficesResponse
      type: object
      description: Response containing an array of Electoral Registration Offices
      properties:
        eros:
          type: array
          items:
            $ref: '#/components/schemas/ElectoralRegistrationOfficeResponse'
      required:
        - eros
    FilterUsersByRole:
      title: FilterUsersByRole
      type: string
      description: Filters list of users
      enum:
        - vc-admin
        - vc-anonymous-admin
        - postal-admin
        - proxy-admin
        - oe-admin
  #
  # Response Body Definitions
  # --------------------------------------------------------------------------------
  responses:
    ElectoralRegistrationOffice:
      description: Response containing a single Electoral Registration Office (ERO)
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ElectoralRegistrationOfficeResponse'
    ElectoralRegistrationOffices:
      description: Response containing an array of Electoral Registration Offices (EROs)
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ElectoralRegistrationOfficesResponse'
    User:
      description: Response for a single User
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserResponse'
    Users:
      description: Response containing an array of Users
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
        Access-Control-Allow-Methods:
          schema:
            type: string
        Access-Control-Allow-Headers:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UsersResponse'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    eroUserCognitoUserPoolAuthorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "cognito_user_pools"
      x-amazon-apigateway-authorizer:
        providerARNs:
          - "${cognito_ero_user_pool_arn}"
        type: "cognito_user_pools"
